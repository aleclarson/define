// Generated by CoffeeScript 1.10.0
var LazyVar, NamedFunction, Property, ReactiveVar, Setter, assertType, defineProto, emptyFunction, guard, isDev, isProto, parseConfig, setType;

assertType = require("type-utils").assertType;

NamedFunction = require("named-function");

emptyFunction = require("emptyFunction");

ReactiveVar = require("reactive-var");

LazyVar = require("lazy-var");

setType = require("setType");

isProto = require("isProto");

isDev = require("isDev");

guard = require("guard");

Setter = require("./setter");

Property = NamedFunction("Property", function(config) {
  var self;
  if (!config) {
    config = {};
  }
  assertType(config, Object, "config");
  if (config.needsValue && (config.value === void 0)) {
    return null;
  }
  if (isDev) {
    self = {
      simple: true,
      writable: config.writable != null ? config.writable : config.writable = true,
      enumerable: config.enumerable,
      configurable: config.configurable != null ? config.configurable : config.configurable = true
    };
    if (config.DEBUG) {
      self.DEBUG = true;
    }
  } else {
    self = {
      simple: true,
      writable: true,
      enumerable: true,
      configurable: true
    };
  }
  setType(self, Property);
  parseConfig.call(self, config);
  return self;
});

module.exports = Property;

Property.prototype.define = function(target, key) {
  var enumerable, get, getSafely, options, set, simple, value;
  if (isProto(target)) {
    defineProto.call(this, target, key);
    return;
  }
  simple = this.simple, enumerable = this.enumerable;
  if (isDev) {
    if (enumerable === void 0) {
      enumerable = key[0] !== "_";
    }
    if (!enumerable) {
      simple = false;
    }
  } else {
    enumerable = true;
  }
  if (simple) {
    target[key] = this.value;
    return;
  }
  if (this.get) {
    get = this.get;
  } else if (this.lazy) {
    value = LazyVar({
      reactive: this.reactive,
      initValue: this.lazy
    });
    get = function() {
      return value.get.call(this);
    };
    getSafely = function() {
      return value._value;
    };
  } else if (this.reactive) {
    value = new ReactiveVar(this.value);
    get = function() {
      return value.get();
    };
    getSafely = function() {
      return value.curValue;
    };
  } else {
    value = this.value;
    get = function() {
      return value;
    };
  }
  if (!this.writable) {
    if (isDev) {
      set = function() {
        throw Error("'" + key + "' is not writable.");
      };
    } else {
      set = emptyFunction;
    }
  } else if (this.get) {
    if (this.set) {
      set = this.set;
    } else {
      set = function() {
        throw Error("'" + key + "' is not writable.");
      };
    }
  } else if (this.lazy) {
    set = function(newValue) {
      return value.set.call(this, newValue);
    };
  } else if (this.reactive) {
    set = function(newValue) {
      return value.set(newValue);
    };
  } else {
    set = function(newValue) {
      return value = newValue;
    };
  }
  options = {
    get: get,
    set: Setter(this, getSafely || get, set),
    enumerable: enumerable,
    configurable: this.configurable
  };
  if (this.DEBUG) {
    console.log("\n");
    console.log("options.get = " + options.get.toString());
    console.log("options.set = " + options.set.toString());
    console.log("set = " + set.toString());
  }
  Object.defineProperty(target, key, options);
};

parseConfig = function(config) {
  var hasValue;
  if (isDev) {
    if (config.frozen) {
      this.simple = false;
      this.writable = false;
      this.configurable = false;
    } else if (config.enumerable === false) {
      this.simple = false;
    } else if (config.configurable === false) {
      this.simple = false;
    } else if (config.writable === false) {
      this.simple = false;
    }
  }
  if (config.get) {
    this.simple = false;
    this.get = config.get;
  } else if (config.set) {
    throw Error("Cannot define 'set' without 'get'!");
  } else if (config.lazy) {
    this.simple = false;
    this.lazy = config.lazy;
    if (config.reactive) {
      this.reactive = true;
    }
  } else {
    hasValue = true;
    this.value = config.value;
    if (config.reactive) {
      this.simple = false;
      this.reactive = true;
    }
  }
  if (this.writable) {
    if (hasValue) {
      this.set = (function(_this) {
        return function(newValue) {
          return _this.value = newValue;
        };
      })(this);
    }
    if (config.set) {
      this.simple = false;
      this.set = config.set;
    }
    if (config.willSet) {
      this.simple = false;
      this.willSet = config.willSet;
    }
    if (config.didSet) {
      this.simple = false;
      this.didSet = config.didSet;
    }
  } else if (config.set) {
    throw Error("Cannot define 'set' when 'writable' is false!");
  } else if (config.willSet) {
    throw Error("Cannot define 'willSet' when 'writable' is false!");
  } else if (config.didSet) {
    throw Error("Cannot define 'didSet' when 'writable' is false!");
  }
};

defineProto = function(target, key) {
  if (this.get) {
    Object.defineProperty(target, key, {
      get: this.get,
      set: this.set || function() {
        throw Error("'" + key + "' is not writable.");
      },
      enumerable: this.enumerable,
      configurable: this.configurable
    });
  } else if (isDev && this.lazy) {
    throw Error("Cannot define 'lazy' when the target is a prototype!");
  } else if (isDev && this.reactive) {
    throw Error("Cannot define 'reactive' when the target is a prototype!");
  } else {
    target[key] = this.value;
  }
};
